setwd("~/Teaching/Stats406/HW/HW5/")
install.packages('XML', dep = T)
library('XML')
xmlGetNeededInfo = function(root) {
lst_ch =xmlChildren(root[[1]])
V1 = xmlValue(xmlChildren(lst_ch$Institution)$Name)
V2 = xmlValue(lst_ch$AwardAmount)
return(c(V1,V2))
}
Files = system('ls ./2012', intern = T)
L = length(Files)
dt = as.data.frame(matrix(NA, ncol = 2, nrow = L))
names(dt) = c('University', 'Amount')
for(jj in 1:L) {
filename = paste('./2012/', Files[jj], sep = "")
doc = xmlTreeParse(filename)
rt = xmlRoot(doc)
val = xmlGetNeededInfo(rt)
dt[jj,] = val
}
Files
L
pattern
pattern = "[Uu]niversity"
pattern
for(i in 1:L) {
x[i] = regexpr(pattern, dt$University[i])
}
x=c()
for(i in 1:L) {
x[i] = regexpr(pattern, dt$University[i])
}
x
dt1 = dt[x != -1,]
dt_new = aggregate(as.numeric(Amount)~University, dt1, sum)
dt_final = dt_new[order(dt_new[[2]], decreasing = T),]
vector = vector(mode = "character", length = 10)
for(i in 1:10) {
vector[i] = dt_final$University[i]
}
vector
class(dt1$Amount0
class(dt1$Amount)
head(dt_final,10)
?sink
library("RSQLite")
drv = dbDriver("SQLite")
conn = dbConnect(drv, "baseball.db")
getwd()
dbListTables(conn)
dbListFields(conn, "Pitching")
sqltext = "SELECT (2016 - birthYear) AS Age, AVG(BB*1.0/SO) AS avg_walk_to_strike_out_ratio FROM Pitching INNER JOIN Master ON Pitching.playerID = Master.playerID WHERE yearID = 2004 AND BB*1.0/SO !='NA' GROUP BY AgE"
dt = dbGetQuery(conn, sqltext)
plot(x = dt$Age, y = dt$avg_walk_to_strike_out_ratio, xlab = "Ages", ylab = "Average Walk To Strike Out Ratio", type = 'p', main = "Average Walk to Strike out Ratio", col = "blue")
sqltext = "SELECT (2016 - birthYear) AS Age, AVG(BB*1.0/SO) AS avg_wtso_ratio
FROM Pitching INNER JOIN Master
ON Pitching.playerID = Master.playerID
WHERE yearID = 2004 AND BB*1.0/SO !='NA'
GROUP BY Age"
dt = dbGetQuery(conn, sqltext)
plot(
x = dt$Age, y = dt$avg_wtso_ratio,
xlab = "Ages", ylab = "Average Walk To Strike Out Ratio",
type = 'p', main = "Average Walk to Strike out Ratio"
)
plot(
x = dt$Age, y = dt$avg_wtso_ratio,
xlab = "Ages", ylab = "Average Walk To Strike Out Ratio",
type = 'b', main = "Average Walk to Strike out Ratio"
)
library('XML')
xmlGetNeededInfo = function(root) {
lst_ch = xmlChildren(root[[1]])
V1 = xmlValue(xmlChildren(lst_ch$Institution)$Name)
V2 = xmlValue(lst_ch$AwardAmount)
return(c(V1,V2))
}
Files = system('ls ./2012', intern = T)
L = length(Files)
dt = as.data.frame(matrix(NA, ncol = 2, nrow = L))
names(dt) = c('University', 'Amount')
for (jj in 1:L) {
filename = paste('./2012/', Files[jj], sep = "")
doc = xmlTreeParse(filename)
rt = xmlRoot(doc)
val = xmlGetNeededInfo(rt)
dt[jj,] = val
}
grep(pattern, dt$University)
length(grep(pattern, dt$University))
dt1 = dt[,]
for (i in 1:L) {
x[i] = regexpr(pattern, dt$University[i])
}
dt1 = dt[x != -1,]
dt_new = aggregate(as.numeric(Amount) ~ University, dt1, sum)
dt_final = dt_new[order(dt_new[[2]], decreasing = T),]
head(dt_final, 10)
# install.packages('XML', dep = T)
library('XML')
xmlGetNeededInfo = function(root) {
lst_ch = xmlChildren(root[[1]])
V1 = xmlValue(xmlChildren(lst_ch$Institution)$Name)
V2 = xmlValue(lst_ch$AwardAmount)
return(c(V1,V2))
}
Files = system('ls ./2012', intern = T)
L = length(Files)
df = as.data.frame(matrix(NA, ncol = 2, nrow = L))
names(df) = c('University', 'Amount')
for (jj in 1:L) {
filename = paste('./2012/', Files[jj], sep = "")
doc = xmlTreeParse(filename)
rt = xmlRoot(doc)
val = xmlGetNeededInfo(rt)
df[jj,] = val
}
# extraxt all `universities'
pattern = "[Uu]niversity"
df_universities = df[grep(pattern, dt$University),]
# sum by universities
df_universities = aggregate(as.numeric(Amount) ~ University, df_universities, sum)
# order by total amount
df_universities = df_universities[order(dt_new[[2]], decreasing = T),]
# look at top 10
head(df_universities, 10)
# install.packages('XML', dep = T)
library('XML')
xmlGetNeededInfo = function(root) {
lst_ch = xmlChildren(root[[1]])
V1 = xmlValue(xmlChildren(lst_ch$Institution)$Name)
V2 = xmlValue(lst_ch$AwardAmount)
return(c(V1,V2))
}
Files = system('ls ./2012', intern = T)
L = length(Files)
df = as.data.frame(matrix(NA, ncol = 2, nrow = L))
names(df) = c('University', 'Amount')
for (jj in 1:L) {
filename = paste('./2012/', Files[jj], sep = "")
doc = xmlTreeParse(filename)
rt = xmlRoot(doc)
val = xmlGetNeededInfo(rt)
df[jj,] = val
}
# extraxt all `universities'
pattern = "[Uu]niversity"
df_universities = df[grep(pattern, dt$University),]
# sum by universities
df_universities = aggregate(as.numeric(Amount) ~ University, df_universities, sum)
# order by total amount
df_universities = df_universities[order(dt_new[[2]], decreasing = T),]
# look at top 10
head(df_universities, 10)
doc = xmlTreeParse('AviationData.xml')
root = xmlRoot(doc)
lst_ch = xmlChildren(root[[1]])
rows = length(root[[1]])
rows
lst_ch
rows
dt = as.data.frame(matrix(NA, ncol = 4, nrow = rows))
names(dt) = c("EventDate","Location","Country","TotalFatalInjuries")
for (i in 1:rows) {
v1 = xmlGetAttr(lst_ch[[i]],"EventDate")
v2 = xmlGetAttr(lst_ch[[i]],"Location")
v3 = xmlGetAttr(lst_ch[[i]],"Country")
v4 = xmlGetAttr(lst_ch[[i]],"TotalFatalInjuries")
v = c(v1,v2,v3,v4)
dt[i,] = v
}
dt1 = dt[dt$Country == "United States",]
dt2 = dt1[dt1$TotalFatalInjuries != "",]
class(dt2[,1])
head(dt2[,1])
v = strsplit(dt2[,1], "/")
v[[1]][3]
for (i in 1:nrow(dt2)) {
dt2[i,1] = as.numeric(v[[i]][3])
}
class(dt2[,4])
dt2[,4] = as.numeric(as.character(dt2[,4]))
dt_new = aggregate(dt2$TotalFatalInjuries, by = list(Year = dt2$EventDate), FUN = sum)
plot(
x = dt_new$Year, y = dt_new$x, xlab = "Year", ylab = "Total Fatal Injuries in the year", type = "p", main = "Total Fatal Injuries in years in United States",col = "blue"
)
get_info <- function(x){
v1 = xmlGetAttr(x,"EventDate")
v2 = xmlGetAttr(x,"Location")
v3 = xmlGetAttr(x,"Country")
v4 = xmlGetAttr(x,"TotalFatalInjuries")
v = c(v1,v2,v3,v4)
v
}
class(root[[1]])
get_info(root[[1]])
get_info(root[1])
(root[[1]])
lst_ch[1]
get_info(lst_ch[1])
class(lst_ch[1])
class(lst_ch[[1])
class(lst_ch[[1]])
get_info(lst_ch[[1]])
test = xmlSApply(lst_ch,get_info)
test = xmlSApply(root,get_info)
test
class(lst_ch)
test = xmlSApply(root[[1]],get_info)
head(test)
get_info(lst_ch[[1]])
class(lst_ch[[1]])
class(lst_ch)
class(lst_ch[1])
(lst_ch[1])
?xmlSApply
xmlSApply(r[[2]], xmlName)
xmlSApply(root[[2]], xmlName)
xmlSApply(root[[1]], xmlName)
test = apply(root[[1]],get_info)
test = sapply(root[[1]],get_info)
test
root[[1]]
test = sapply(root[[1]],get_info)
test
test = sapply(lst_ch,get_info)
test
lst_ch[1]
get_info(lst_ch[1])
get_info(lst_ch[[1]])
get_info(lst_ch[[2]])
get_info(lst_ch[[3]])
test = sapply(lst_ch[[1]],get_info)
test = sapply(root,get_info)
test = sapply(root[1],get_info)
test
test = sapply(root[[1]],get_info)
test
head(lst_ch)
xmlSApply(lst_ch,xmlValue)
xmlSApply(root,xmlValue)
v2 = substr(dt2[,1],7,10)
v2
dt2 = dt1[dt1$TotalFatalInjuries != "",]
v2 = substr(dt2[,1],7,10)
v2
dt2 = dt1[dt1$TotalFatalInjuries != "",]
dt2[,1] = as.numeric(substr(dt2[,1],7,10))
dt2[,4] = as.numeric(dt2[,4])
dt_new = aggregate(dt2$TotalFatalInjuries, by = list(Year = dt2$EventDate), FUN = sum)
plot(
x = dt_new$Year, y = dt_new$x,
xlab = "Year", ylab = "Total Fatal Injuries in the year",
type = "b", main = "Total Fatal Injuries in years in United States"
)
