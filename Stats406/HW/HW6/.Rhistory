expression(paste('2',phi,'(x)'))),
col=c(1,2,4),lty = c(1,2,1))
rejection_sampling <- function(n)
{
## constant M
M <- 2
## Initialize the output
x <- rep(0, n)
k <- 0 ## Number of accepted samples
## While loop until there are n accepted samples
while (k <= n)
{
y <- rnorm(1)
u <- runif(1)
if (u*M*dnorm(y) <= f(y))
{
k <- k + 1
x[k] <- y
}
}
return(x)
}
x <- rejection_sampling(10000)
hist(x, breaks=20,prob = TRUE)
lines(x,f(x),'l')
rejection_sampling <- function(n)
{
## constant M
M <- 2
## Initialize the output
x <- rep(0, n)
k <- 0 ## Number of accepted samples
## While loop until there are n accepted samples
while (k <= n)
{
y <- rnorm(1)
u <- runif(1)
if (u*M*dnorm(y) <= f(y))
{
k <- k + 1
x[k] <- y
}
}
return(x)
}
x <- rejection_sampling(10000)
hist(x, breaks=20,prob = TRUE)
lines(xseq,f(xseq),'l')
Phi.m = function(m,xseq){
# xseq can be either a scalar or a vector
X = rnorm(m)
Phi.m.x = sapply(xseq,function(x){mean(X<x)})
return(Phi.m.x)
}
m = c(5,50,500)
xseq = seq(-4,4,by=0.01)
plot(0,xlim=c(-4,4),ylim=c(0,1),xlab="x",ylab="Phi.m(x)",
main="Empirical CDF", type='n')
for (i in 1:length(m)){
par(new=T)
plot(xseq,Phi.m(m[i],xseq),col=i,axes=F,type="l",xlim=c(-4,4),
ylim=c(0,1),xlab="",ylab="")
}
lines(xseq,pnorm(xseq,mean=0,sd=1),col=4,lty=3,lwd=2)
legend("topleft",legend=c(paste(m,'points'),'Normal cdf'),
col=1:4,lty=c(1,1,1,3))
rejection_sampling <- function(n)
{
## constant M
M <- 2
## Initialize the output
x <- rep(0, n)
k <- 0 ## Number of accepted samples
## While loop until there are n accepted samples
while (k <= n)
{
y <- rnorm(1)
u <- runif(1)
if (u*M*dnorm(y) <= f(y))
{
k <- k + 1
x[k] <- y
}
}
return(x)
}
x <- rejection_sampling(10000)
hist(x, breaks=20,prob = TRUE)
lines(xseq,f(xseq),'l')
n = 10
k = 5
lambda = 3
x = matrix(-(1/lambda)*log(runif(n*k)), ncol=k)
(g = apply(x, 1, sum))
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE, ylim = c(0,3))
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
knitr::opts_chunk$set(echo = TRUE)
Phi.m = function(m,xseq){
# xseq can be either a scalar or a vector
X = rnorm(m)
Phi.m.x = sapply(xseq,function(x){mean(X<x)})
return(Phi.m.x)
}
m = c(5,50,500)
xseq = seq(-4,4,by=0.01)
plot(0,xlim=c(-4,4),ylim=c(0,1),xlab="x",ylab="Phi.m(x)",
main="Empirical CDF", type='n')
for (i in 1:length(m)){
par(new=T)
plot(xseq,Phi.m(m[i],xseq),col=i,axes=F,type="l",xlim=c(-4,4),
ylim=c(0,1),xlab="",ylab="")
}
lines(xseq,pnorm(xseq,mean=0,sd=1),col=4,lty=3,lwd=2)
legend("topleft",legend=c(paste(m,'points'),'Normal cdf'),
col=1:4,lty=c(1,1,1,3))
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE, ylim = c(0,3))
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
n = 10
k = 5
lambda = 3
x = matrix(-(1/lambda)*log(runif(n*k)), ncol=k)
(g = apply(x, 1, sum))
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, n_max, prob)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
k = seq(0, n_max)
p <- choose(n_max, k)* prob^k * (1-prob)^(n_max-k)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
t <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[t] > z[i]
while (s < z[i])
{
t <- t + 1
s <- s + p[t+1]
}
x[i] <- t
}
return(x)
}
## Call binomial generator
x <- binomial(n = 1000, n_max = 10, prob = 0.4)
hist(x, xlim = c(0, 10))
xseq <- seq(-2,2,0.01)
f <- function(x){
2/pi*sqrt(pmax(1-x^2,rep(0,length(x))))
}
plot(xseq,f(xseq),'l',ylim=c(0,1),ylab = "f(x)",xlab="x",main = "density of target and proposals")
lines(xseq,dnorm(xseq),'l',col=4,lty=2)
lines(xseq,2*dnorm(xseq),'l',col=2)
legend("topright",
legend=c('f(x)',
expression(paste(phi,'(x)')),
expression(paste('2',phi,'(x)'))),
col=c(1,2,4),lty = c(1,2,1))
rejection_sampling <- function(n)
{
## constant M
M <- 2
## Initialize the output
x <- rep(0, n)
k <- 0 ## Number of accepted samples
## While loop until there are n accepted samples
while (k <= n)
{
y <- rnorm(1)
u <- runif(1)
if (u*M*dnorm(y) <= f(y))
{
k <- k + 1
x[k] <- y
}
}
return(x)
}
x <- rejection_sampling(10000)
hist(x, breaks=20,prob = TRUE)
lines(xseq,f(xseq),'l')
library(BH)
?BH
as.factor(c("N/A","2","3"))
as.double(as.factor(c("N/A","2","3")))
as.double(as.character(as.factor(c("N/A","2","3"))))
library (Rcpp)
cppFunction (
" NumericVector test(int x, NumericVector y) {
NumericVector z;
z.push_back(x++);
z.push_back (++y [0]);
return z;
}"
)
x = 1L
y = c(1.0 , 0.2)
z = test(x, y)
cat(c(x, y, z))
x = 1
y = c(1.0 , 0.2)
z = test(x, y)
cat(c(x, y, z))
cppFunction (
" NumericVector test(double x, NumericVector y) {
NumericVector z;
z.push_back(x++);
z.push_back (++y [0]);
return z;
}"
)
x = 1
y = c(1.0 , 0.2)
z = test(x, y)
cat(c(x, y, z))
x = 1
y = c(1L , 2L)
z = test(x, y)
z
cat(c(x, y, z))
y = c(1 , 2)
z = test(x, y)
cat(c(x, y, z))
rep(list(c(2,9),c(4,11),c(1,6)),c(3,5,1))
list(c(2,9),c(4,11),c(1,6))
unlist(rep(list(c(2,9),c(4,11),c(1,6)),c(3,5,1)))
df <- data.frame(matrix(unlist(rep(list(c(2,9),c(4,11),c(1,6)),c(3,5,1))),ncol = 2))
df
dimnames(df)
names(df)
names(df) <- c("x",y)
names(df) <- c("x","y")
df
df <- data.frame(matrix(unlist(rep(list(c(2,9),c(4,11),c(1,6)),c(3,5,1))),ncol = 2,byrow = T))
names(df) <- c("x","y")
df
aggregate (df ,by=list(df$x),FUN = function (x) x[1])[ -1]
aggregate(df ,by=list(df$x),FUN = function (x) x[1])
aggregate(df ,by=list(df$x),FUN = function(x) x[1])[-1]
?aggregate
aggregate(df ,by=list(df$x),FUN = function(x) x[2])[-1]
aggregate(df ,by=list(df$x),FUN = function(x) x[0])[-1]
aggregate(df ,by=list(df$x),FUN = function(x) x[0])
aggregate(df ,by=list(df$x),FUN = function(x) x[2])
aggregate(df ,by=list(df$x),FUN = function(x) x[1])
aggregate(df ,by=list(df$x),FUN = function(x) )
aggregate(df ,by=list(df$x),FUN = function(x) x)
df
aggregate(df ,by=list(df$x),FUN = function(x) x)
aggregate
aggregate(df ,by=list(df$x),FUN = function(x) {print(x);x[1]})
aggregate(df ,by=list(df$x),FUN = function(x) {print(x[1]);x[1]})
aggregate(df ,by=list(df$x),FUN = function(x) {print(x);x[1]})
aggregate(df ,by=list(df$x),FUN = function(x) {print(x);sum(x)})
df <- data.frame(matrix(unlist(rep(list(c(2,9),c(4,11),c(1,6)),c(3,5,1))),ncol = 2,byrow = T))
names(df) <- c("x","y")
df$y[5] <- 0
df
aggregate(df ,by=list(df$x),FUN = function(x) {print(x);sum(x)})
aggregate(df,by=list(df$x),FUN = function(x) {print(x);sum(x)})
by <- list(df$x)
aggregate(df,by=by,FUN = function(x) {print(x);sum(x)})
by
n = 1000
hfun = function(x){
return(pnorm(x,mean=0, sd=1))
}
X = runif(n, min=0, max=sqrt(2*pi))
Y = hfun(X)
Ihat = mean(Y)
se = sqrt(var(Y)/n)
se
Ihat
#Problem 1
n = 1000
hfun = function(x){
return(pnorm(x,mean=0, sd=1))
}
X = runif(n, min=0, max=sqrt(2*pi))
Y = hfun(X)
Ihat = mean(Y)
se = sqrt(var(Y)/n)
Ihat
#Part b
alpha = 2
beta = 0.5
m = c(2.16,0.74,1.87,3.03,3.11,2.74,1.23,3.64,1.57,2.12)
M = gamma(alpha)/beta^alpha
g = function(x){
return(beta^alpha/gamma(alpha)*x^(alpha-1)*exp(-beta*x))
}
f = function(x){
return(x^(alpha-1)*exp(-beta*x-1/2*sum((x-m)^2)))
}
simulate = function(n){
Vy=numeric(n)
j=1
while (j<=n){
Y = rgamma(1, shape = alpha, rate = beta)
u=runif(n = 1,min = 0, max = M*g(Y))
if (u<=Y){
Vy[j]=Y;
j=j+1
}
}
return(Vy)
}
#Part c
sample = simulate(1000)
I = mean(sample)
se = sqrt(var(sample)/n)
z = qnorm(0.975)
CI = c(I-z*se,I+z*se)
#CI:[1] 3.758507 4.094288
CI
## PART B ##
rejfun = function(n) {
a = 2;
B = 0.5;
count = 0
m = c(2.16, 0.74, 1.87, 3.03, 3.11, 2.74, 1.23, 3.64, 1.57, 2.12)
sum = numeric(1)
Yvec = numeric(n)
helperF = function(x) {
return(exp(-0.5*x*x + x*m_i -0.5*m_i*m_i))
}
for( i in 1:10 ) {
m_i = m[i]
sum = sum + integrate(helperF, lower=0, upper=Inf)$value
}
M = 1/sum
while(count < n) {
Y = rgamma(1, shape = a, scale = B)
if(Y <= M) {
Yvec[count + 1] = Y
count = count + 1
}
}
helperF2 = function(x,m) {
part1 = x*exp(-0.5*x)
part2 = numeric(1000)
for(j in 1:10) {
part2 = part2 + exp(-0.5*sum((x-m[j])^2))
}
return(part1*part2)
}
fX = Yvec*exp(-0.5*Yvec-0.5*helperF2(Yvec,m))
return(fX)
}
fX = rejfun(1000)
## Part C ##
omega_fun = function(x,m) {
wtilde = numeric(1000)
for(k in 1:10) {
wtilde = wtilde + exp(-0.5*sum((x-m[k])^2))
}
return(wtilde)
}
m = c(2.16, 0.74, 1.87, 3.03, 3.11, 2.74, 1.23, 3.64, 1.57, 2.12)
n = 1000
X = rejfun(1000)
OM = omega_fun(X,m)
est=sum(X*OM)/sum(OM)
CVsq = 1.0*var(OM/mean(OM))
v1 = var((OM/mean(OM))*X)
se = sqrt(v1/n)
z = qnorm(0.975)
CI = c(est - z*se, est + z*se)
CI
est
rm(list = ls())
integrand.function <- function(x){return(exp(-(x^2)))};
integrand.function;
random.var.generated <- runif(n = 1000, min= 0, max = 1);
## generate against a uniform density, sample size = 1000 ##
integrand.norm <- integrand.function(random.var.generated) / dunif(random.var.generated);
I.norm <- mean(integrand.norm);
var.I.norm <- var(integrand.norm);
I.norm
var.I.norm
I.norm;
var.I.norm;
rm(list=ls())
monteCarloError = function(monteCarloValues, estimate) {
n = length(monteCarloValues)
sSquared = sum((monteCarloValues - estimate) ^ 2) / (n - 1)
error = sqrt(sSquared) / sqrt(n)
return (error)
}
problem1 = function() {
N = 1000
monteCarloValues = exp(-runif(N)^2)
iHat = mean(monteCarloValues)
error = monteCarloError(monteCarloValues, iHat)
cat("Estimate: ", iHat, "\n", sep="")
cat("Error: ", error, "\n", sep="")
}
problem1()
problem2b = function(n) {
m = c(2.16, 0.74, 1.87, 3.03, 3.11, 2.74, 1.23, 3.65, 1.57, 2.12)
alpha = 2
beta = 0.5
values = c()
while (length(values) < n) {
Y = rgamma(1, shape = alpha, rate = beta)
U = runif(1)
if (U * exp(-0.5 * sum((mean(m) - m) ^ 2)) <= exp(-0.5 * sum((Y - m) ^ 2))) {
values = append(values, Y)
}
}
return (values)
}
problem2c = function() {
n = 1000
monteCarloValues = problem2b(n)
iHat = mean(monteCarloValues)
error = monteCarloError(monteCarloValues, iHat)
z = qnorm(0.975)
lowerBound = iHat - z * error
upperBound = iHat + z * error
cat("Estimation for Integral: ", iHat, "\n", sep="")
cat("Confidence Interval: [", lowerBound, ", ", upperBound, "]\n", sep="")
}
problem2b()
problem2c()
problem2b(10000)
hist(problem2b(10000))
mean(problem2b(10000))
rm(list=ls())
hfun = function(x){
return(exp((-x)^2))
}
nSple = 1000
uniforms = runif(nSple)
hvalues = hfun(uniforms)
Ihat = mean(hvalues) #Monte Carlo Estimate
se = sqrt(var(hvalues)/nSple) #Monte Carlo Error
Ihat
#2(b)
m = c(2.16, 0.74, 1.87, 3.03, 3.11, 2.74, 1.23, 3.64, 1.57, 2.12)
g = function(x){
if(x >= 0){
d = (((0.5)^2)/dgamma(x,1))*x*(exp(-0.5*x))
}
else{
d = 0
}
return (d)
}
fun = function(x){
return(x*exp(-0.5*x - (0.5*sum((x-m)^2))))
}
f = function(x){
if(x >= 0){
num = fun(x)
nSple = 1000
unif = runif(nSple)
denom_values = fun(unif)
denom = mean(denom_values)
d = num/denom
}
else{
d = 0
}
return(d)
}
rejection = function(n){
M = 2
x = rep(0,n)
k = 0 #number of accepted samples
while(k <= n){
y = rnorm(1)
u = runif(1)
if(u*M*g(y) <= f(y)){
k = k + 1
x[k] = y
}
}
return(x)
}
#2(c)
nSple = 1000
uniforms = runif(nSple)
values = rejection(nSple)
Ihat = mean(values)
se = sqrt(var(values)/nSple)
z = qnorm(0.975)
CI = c(Ihat - z*se, Ihat + z*se)
Ihat
CI
setwd("~/Teaching/Stats406/HW/HW6/")
list.files()
load("clintonaddresses.RData")
terrorism = lengths(regmatches(clintonaddresses, gregexpr("terrorism", clintonaddresses, ignore.case = TRUE)))
terrorist = lengths(regmatches(clintonaddresses, gregexpr("terrorist", clintonaddresses, ignore.case = TRUE)))
sum = terrorism + terrorist
sum
terrorism
rm(list=ls())
